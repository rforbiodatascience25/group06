---
title: "Lab 5 assignment: Group 6"
format: 
  html:
    embed-resources: true 
editor: visual
---

# Lab 5 assignment: Group 6

## **Info**

**Group number:** 06

**Group members:**

Alberte Englund, s215067

Mathilde Due, s215063,

Line Gormsen, s215111

Sigrid Frandsen, s205875

Kristine Johansen, s215098

## 1. Background

In the early 20s, the world was hit by the coronavirus disease 2019 (COVID-19) pandemic. The pandemic was caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). In Denmark, the virus first confirmed case was on 27 February 2020.

While initially very little was known about the SARS-CoV-2 virus, we did know the general pathology of vira. Briefly, the virus invades the cells and hijacks the intra-cellular machinery. Using the hijacked machinery, components for new virus particles are produced, eventually being packed into the viral envelope and released from the infected cell. Some of these components, viral proteins, is broken down into smaller fragments called peptides by the proteasome. These peptides are transported into the endoplasmic reticulum by the Transporter Associated with antigen Processing (TAP) protein complex. Here, they are aided by chaperones bound to the Major Histocompatilibty Complex class I (MHC-I) and then across the Golgi apparatus they finally get displayed on the surface of the cells. Note, in humans, MHC is also called Human Leukocyte Antigen (HLA) and represents the most diverse genes. Each of us have a total of 6 HLA-alleles, 3 from the maternal and 3 from the paternal side. These are further divided into 3 classes HLA-A, HLA-B and HLA-C and the combination of these constitute the HLA-haplotype for an individual. Once the peptide is bound to the MHC class I at the cell surface and exposed, the MHC-I peptide complex can be recognised by CD8+ Cytotoxic T-Lymphocytes (CTLs) via the T-cell Receptor (TCR). If a cell displays peptides of viral origin, the CTL gets activated and via a cascade induces apoptosis (programmed cell death) of the infected cell. The process is summarised in the figure below ([McCarthy and Weinberg 2015](https://r4bds.github.io/references.html#ref-McCarthy2015)).

The data we will be working with today contains data on sequenced T-cell receptors, viral antigens, HLA-haplotypes and clinical meta data for a cohort:

“A large-scale database of T-cell receptor beta (TCR) sequences and binding associations from natural and synthetic exposure to SARS-CoV-2” ([Nolan et al. 2020](https://r4bds.github.io/references.html#ref-Nolan2020)).

## 2. Aim

The aims of the report is to determine:

1.  What characterises the peptides binding to the HLAs?

2.  What characterises T-cell Receptors binding to the pMHC-complexes?

## 3. Load Libraries

```{r}
#| message: false
#| warning: false
library("tidyverse")
library("here")
library("dplyr")
library("ggplot2")
library("readr")
library("tibble")
```

## 4. Load Data

```{r}

data_path <- "../../data"

peptide_data <- read_csv(file.path(data_path, "peptide-detail-ci.csv"), , na = c("", "NA", "N/A","n/a"))
meta_data    <- read_csv(file.path(data_path, "subject-metadata.csv"), na = c("", "NA", "N/A","n/a"))

#| echo: true 
#| eval: false 
```

## 5. Data Description

There are two data sets, the subject meta data and the peptide details data. The meta data includes a subject number, cell type, target type, Cohort, Age, Gender, Race, and the HLA-haplotype of each individual (HLA-A, HLA-B, and HLA-C for class I). The peptide data includes TCR BioIdentity, TCR Nucleotide Sequence, experiment, ORF coverage, Amino Acids, Start Index in Genome, and End Index in Genome.

# 6. Analysis

## The subject Meta Data

```{r}
meta_data |> 
  slice_sample(n = 10)
```

**Observations and variables in the data:**

```{r}
meta_data |>
  dim()
```

There are 30 variables (horizontal columns) and 144 observations (vertical rows).

**Groupings in the variables:**

The data contains general metadata variables, different HLA gene groups (each gene has two alleles) of class I and II (A, B, C, DPA1, DPB1, DQA1, DQB1, DRB1, DRB3, DRB4, DRB5)

**Cohort divisions:**

The data is divided by cohort and data labelled as N/A is excluded using drop_na. This plot showcases the division and number of patients for each cohort, where COVID-19-Convalescent holds the majority.

```{r}
pl <- meta_data |>
  drop_na(Cohort, Gender) |>   
  count(Cohort, Gender) |> 
  ggplot(aes(x = Cohort,
             y = n, 
             fill = Gender)) +
    geom_col(position = position_dodge(
      preserve = "single"), 
      color="black", 
      alpha = 0.4) +
  geom_hline(yintercept = 0) +
    theme_minimal(base_size = 11) +
    theme(
      axis.text.x = element_text(size = 9, 
                                 angle = 10, 
                                 hjust = 1, 
                                 vjust = 1.2),
      legend.position = "bottom", 
      panel.grid.major.x = element_blank()
      ) +
  labs(x = "Cohort", 
       y = "n", 
       fill = "Gender") 

pl
```

**Meta data divided by age group and gender**:

The data is biased by younger age groups, mainly (20;30\] and (30;40\].

```{r}
pl <- meta_data |> 
  mutate(Age_group = cut(
    x = Age,
    breaks = seq(from = 0,
                 to = 80,
                 by = 10))) |> 
  drop_na(Gender, Age_group) |> 
  count(Gender, Age_group) |> 
  ggplot(aes(x = Age_group,
             y = n,
             fill = Gender)) +
  geom_col(position = position_dodge(
    preserve = "single"),
    colour = "black",
    alpha = 0.4) +
  geom_hline(yintercept = 0) +
  theme_minimal(base_size = 10) +
  theme(legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        axis.text.x = element_text(vjust = 4))
pl
```

**Amount of data with N/A for gender**

The data also holds a prevalent amount of N/A data points, mainly for the age, gender and race variables.

```{r}
pl <- meta_data |>
  count(Cohort, Gender) |> 
  ggplot(aes(x = Cohort,
             y = n, 
             fill = Gender)) +
    geom_col(position = position_dodge(
      preserve = "single"), 
      color="black", 
      alpha = 0.4) +
  geom_hline(yintercept = 0) +
    theme_minimal(base_size = 11) +
    theme(
      axis.text.x = element_text(size = 9, 
                                 angle = 10, 
                                 hjust = 1, 
                                 vjust = 1.2),
      legend.position = "bottom", 
      panel.grid.major.x = element_blank()
      ) +
  labs(x = "Cohort", 
       y = "n", 
       fill = "Gender") 
pl
```

**Description of the cohort**

The group of subjects in the study divided by gender, age and race for each cohort.

```{r}
library("table1") # 
meta_data |>
  mutate(Gender = factor(Gender),
         Cohort = factor(Cohort)) |>
  table1(x = formula(~ Gender + Age + Race | Cohort),
         data = _)
```

**Data Wrangling: Focus on Class I**

The meta_data is divided by alleles and class I contains two alleles for each one (i.e. HLA-A1, HLA-A2, HLA-B1, HLA-B2, HLA-C1, HLA-C2).

Class II, i.e. the columns that start with DP, DQ, or DR are dropped, to focus on class I (A, B, C).

```{r}
meta_data <- meta_data |>
  select(-matches(match = "D[PQR]")) |>
  rename("A1" = "HLA-A...9",
         "A2" = "HLA-A...10",
         "B1" = "HLA-B...11",
         "B2" = "HLA-B...12",
         "C1" = "HLA-C...13",
         "C2" = "HLA-C...14")
```

# The Peptide Details Data

The peptide data includes the 7 variables TCR BioIdentity, TCR Nucleotide Sequence, Experiment, ORF Coverage, Amino Acids, Start Index in Genome, and End Index in Genome, along with 154320 observations.

```{r}
peptide_data |> 
  dim()
```

```{r}
readr::write_csv(peptide_data,
          file = "data/peptide-detail-ci.csv.gz")
```

```{r}
View(peptide_data)
```

**Sub-setting the `peptide_data` to the variables of interest: `TCR BioIdentity`, `Experiment` and `Amino Acids`.**

```{r}
peptide_data <- peptide_data |>
  select(Experiment,
         `TCR BioIdentity`,
         `Amino Acids`)
```

**Dividing the data**

TCR Bioidentity should be divided into CDR3b, V_gene and J_gene, which are separated by a +

```{r}
peptide_data <- peptide_data |> 
  separate(col = `TCR BioIdentity`,
           into = c("CDR3b", "V_gene", "J_gene"),
           sep = "\\+") 
```

**Counting the amount of peptides in each observation of Amino Acids**

```{r}

## stringr::str_count()

peptide_data <- peptide_data |> 
  mutate(n_peptides = str_count(`Amino Acids`,
                                pattern = ",") + 1)
peptide_data

```

**Peptides per observation**

The maximum number of peptides:

```{r}
max_n_peptides <- peptide_data |>
  pull(n_peptides) |>
  max()
max_n_peptides
```

The minimum number of peptides:

```{r}
min_n_peptides <- peptide_data |>
  pull(n_peptides) |>
  min()
min_n_peptides
```

The number of peptides per observation differs for each data point, with the majority having only a single peptide.

```{r}
pl <- peptide_data |> 
  ggplot(aes(x = n_peptides)) +
  geom_histogram(binwidth = 1,
                 colour = "black",
                 alpha = 0.5) + 
  geom_hline(yintercept = 0) +
  scale_x_continuous(breaks = 1:13) +
  theme_minimal(base_size = 10) +
  theme(panel.grid.minor.x = element_blank(),
        panel.grid.major.x = element_blank(),
        axis.text.x = element_text(vjust = 5)) +
  labs(x = "Number of peptides per observation",
       y = "Counts")
pl
```

The peptides (n) are listed under Amino Acids, which are divided for each experiment. The remaining genes, that does not hold the maximum number of peptides (13), will be filled with NA (no answer). Peptide_n makes this data wide.

```{r}

peptide_data <- peptide_data |> 
  separate(col = `Amino Acids`,
           into = str_c("peptide_", 1:max_n_peptides),
           sep = ",")
peptide_data |> 
  sample_n(10)
```

**Data pivoting peptide_data**

```{r}
peptide_data <- peptide_data |> 
  pivot_longer(cols = contains("peptide_"),
               names_to = "peptide_n",
               values_to = "peptide")
peptide_data
```

This change from wide to long data results in a larger amount of observations, changing from 154320 to 2006160

```{r}
peptide_data |> 
  dim()
```

Now there are 13 rows for each gene, following the peptide_1, peptide_2, etc. pattern. Further, getting ruid of the redundant variables `n_peptides` and `peptide_n`, the `NA`s in the `peptide` column, to only have unique observations

```{r}
peptide_data <- peptide_data |> 
  select(-n_peptides, -peptide_n) |> 
  drop_na(peptide) |> 
  distinct()
peptide_data
```

Now each row is an observation and each column is a single variable. The overall amount observations and variables in the data decreased.

```{r}
peptide_data |> 
  dim()
```

**Filtering the CDR3b and peptide variables**

There are a total of 20 proteogenic amino acids, which we symbolise using `ARNDCQEGHILKMFPSTWYV` (the pattern)

```{r}
clean_amino_acids <- function(x){
  # str_detect(x, pattern = "^[ARNDCQEGHILKMFPSTWYV]+$") will also work
  return( str_detect(x, pattern = "[^ARNDCQEGHILKMFPSTWYV]", negate = TRUE) )
}
peptide_data <- peptide_data |> 
  filter(clean_amino_acids(CDR3b),
         clean_amino_acids(peptide))
peptide_data
```

**Signifying the length of respective sequences by `k_CDR3b` and `k_peptide`**

```{r}
peptide_data <- peptide_data |> 
  mutate(k_CDR3b = str_length(CDR3b),
         k_peptide = str_length(peptide))
peptide_data
```

**The length of CDR3b sequences**

```{r}
pl <- peptide_data |> 
  ggplot(aes(x = k_CDR3b)) +
  geom_histogram(binwidth = 1,
                 colour = "black",
                 alpha = 0.5) +
  geom_hline(yintercept = 0) +
  theme_minimal(base_size = 10)
pl
```

**The most predominant length of the CDR3b-sequences**

```{r}
CDR3b_length <- peptide_data |> 
  count(k_CDR3b, sort = TRUE) |> 
  slice(1) |> 
  pull(k_CDR3b)

CDR3b_length
```

**The length of peptide sequences**

```{r}
pl <- peptide_data |> 
  ggplot(aes(x = k_peptide)) +
  geom_histogram(binwidth = 1,
                 colour = "black",
                 alpha = 0.5) +
  geom_hline(yintercept = 0) +
  theme_minimal(base_size = 10)
pl
```

**The most predominant length of the peptide-sequences**

```{r}

length_peptide <- peptide_data |> 
  count(k_peptide, sort = TRUE) |> 
  slice(1) |> 
  pull(k_peptide)

length_peptide
```

**Looking at the data**

```{r}

peptide_data |> 
  slice_sample(n = 10)
```

# Creating one data set from two data sets

The following two datasets (meta and peptide) are joined using the `*_join()` functions.

**Meta data in a wide data format**

```{r}
meta_data |> 
  slice_sample(n = 10)
```

**Matching up the genes (A1, A2, B1, B2, C1, C2) to each allele**

```{r}
meta_data <- meta_data |> 
  pivot_longer(cols = c("A1", "A2", "B1", "B2", "C1", "C2"),
               names_to = "Gene",
               values_to = "Allele")
meta_data
```

The **`peptide_data` and the `meta_data`** share the Experiment variable. The two variables of interest are experiment and allele, which are selected:

```{r}
meta_data <- meta_data |> 
  select(Experiment, Allele) |> 
  distinct()
meta_data
```

**The Nomenclature of the alleles are e.g. `A*11:01` and `B*51:01:02`.**

Two fields are included; allele group, and specific HLA protein, along with a new variable `Allele_F_1_2`. The `...x` (where `x` is a number) subscripts from the `Gene`variable are removed. We are also removing NA and "" via drop_na, which are empty entries.

```{r}

# stringr::str_extract()

meta_data <- meta_data |>
  mutate(Allele_F_1_2 = str_extract(Allele,
                                    pattern = "^[ABC]\\*\\d+\\:\\d+")) |>
  filter(Allele_F_1_2 != "") |> 
  drop_na()
meta_data
```

**Removing the asterisk ( i.e. `*`) and redundant variables:**

```{r}
meta_data <- meta_data |> 
  mutate(Allele_F_1_2 = str_remove(Allele_F_1_2, "\\*")) |> 
  select(-Allele) |>
  rename(Allele = Allele_F_1_2) |> 
  distinct()
meta_data
```

**`dplyr` pipeline**

Starting with the `peptide_data`, which joins it with the `meta_data` into new variable named `peptide_meta_data.`The data is joined via the column Experiment, keeping all rows from both data sets. The relationship = "many-to-many" means that multiple rows can match multiple rows in the intersection between data.

```{r}

peptide_meta_data <- peptide_data |> 
  full_join(meta_data,
            by = "Experiment",
            relationship = "many-to-many") |> 
  distinct()
peptide_meta_data |>
  sample_n(10)
```

# Analysis

## Peptides binding to HLA

Return to the two aims of the report:

1.  What characterises the peptides binding to the HLAs?

2.  What characterises T-cell Receptors binding to the pMHC-complexes?

To create sequence logos, we have to create a binding motif using the package `ggseqlogo`

**Sequence logo: Observations of peptides of length 9 for the allele `A02:01`**

```{r}
library("ggseqlogo")
pl <- peptide_meta_data |>
  filter(Allele == "A02:01",
         str_length(peptide) == 9) |>
  select(peptide) |>
  distinct() |>
  pull(peptide) |>
  ggseqlogo()

pl
```

**Sequence logo: Observations of peptides of length 9 for the allele `B07:02`**

```{r}

pl <- peptide_meta_data |>
  filter(Allele == "B07:02",
         str_length(peptide) == 9) |>
  select(peptide) |>
  distinct() |>
  pull(peptide) |>
  ggseqlogo()
pl
```

The logo plot represents a multiple sequence alignment showing the conservation and relative frequencies of amino acids or nucleotides at each position in a sequence motif. The total height of each stack of letters indicates the degree of conservation, at that position, while the height of individual letters within the stack represents their observed frequency. The colors denote different properties of the amino acids.

Thereby, positions 2 and 9 determines the binding to HLA for peptides of a length of 9 amino acids.

## CDR3b-sequences binding to pMHC

```{r}
View(peptide_meta_data)
```

Subsetting the peptide_meta_data for a length of 15 for CDR3b with the allele A02:01 and the peptide is LLFLVLIML.

```{r}
pl <- peptide_meta_data |>
  filter(k_CDR3b == 15,
         Allele == "A02:01",
         peptide == "LLFLVLIML") |> 
  pull(CDR3b) |> 
  ggseqlogo()
pl
```

Subsetting the peptide_meta_data for a length of 15 for CDR3b with the allele C04:01 and the peptide ADAGFIKQY.

```{r}
pl <- peptide_meta_data |>
  filter(k_CDR3b == 15,
         Allele == "C04:01",
         peptide == "ADAGFIKQY") |> 
  pull(CDR3b) |> 
  ggseqlogo()
pl
```

Subsetting the peptide_meta_data for a length of 13 for CDR3b with the allele A11:01 and the peptide TLADAGFIK.

```{r}
pl <- peptide_meta_data |>
  filter(k_CDR3b == 13,
         Allele == "A11:01",
         peptide == "TLADAGFIK") |> 
  pull(CDR3b) |> 
  ggseqlogo()
pl
```

For a specific observation of the data set, the logo plot will show a total conservation across all amino acid positions. This example is for the specific CDR3b allele B58:01 with a length of 16 and the peptide ADAGFIKQY.

```{r}
pl <- peptide_meta_data |>
  filter(k_CDR3b == 16,
         Allele == "B58:01",
         peptide == "ADAGFIKQY") |> 
  pull(CDR3b) |> 
  ggseqlogo()
pl

```

Based on this analysis, the defining characteristics of the T-cell Receptors binding to the pMHC-complexes appears to be driven by the first and last residues of the sequences, as these are highly conserved across different data points. The middle of the sequence will likely determine the specific affinity between each T-cell receptor and pMHC-complex pair, as the sequences showcase more variability here.
