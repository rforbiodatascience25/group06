---
title: "Lab_5_Data_Wrangling_II"
format: html
editor: visual
---

# Lab 5: Data Wrangling II 

## 1. Background

In the early 20s, the world was hit by the coronavirus disease 2019 (COVID-19) pandemic. The pandemic was caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). In Denmark, the virus first confirmed case was on 27 February 2020.

While initially very little was known about the SARS-CoV-2 virus, we did know the general pathology of vira. Briefly, the virus invades the cells and hijacks the intra-cellular machinery. Using the hijacked machinery, components for new virus particles are produced, eventually being packed into the viral envelope and released from the infected cell. Some of these components, viral proteins, is broken down into smaller fragments called peptides by the proteasome. These peptides are transported into the endoplasmic reticulum by the Transporter Associated with antigen Processing (TAP) protein complex. Here, they are aided by chaperones bound to the Major Histocompatilibty Complex class I (MHC-I) and then across the Golgi apparatus they finally get displayed on the surface of the cells. Note, in humans, MHC is also called Human Leukocyte Antigen (HLA) and represents the most diverse genes. Each of us have a total of 6 HLA-alleles, 3 from the maternal and 3 from the paternal side. These are further divided into 3 classes HLA-A, HLA-B and HLA-C and the combination of these constitute the HLA-haplotype for an individual. Once the peptide is bound to the MHC class I at the cell surface and exposed, the MHC-I peptide complex can be recognised by CD8+ Cytotoxic T-Lymphocytes (CTLs) via the T-cell Receptor (TCR). If a cell displays peptides of viral origin, the CTL gets activated and via a cascade induces apoptosis (programmed cell death) of the infected cell. The process is summarised in the figure below ([McCarthy and Weinberg 2015](https://r4bds.github.io/references.html#ref-McCarthy2015)).

The data we will be working with today contains data on sequenced T-cell receptors, viral antigens, HLA-haplotypes and clinical meta data for a cohort:

“A large-scale database of T-cell receptor beta (TCR) sequences and binding associations from natural and synthetic exposure to SARS-CoV-2” ([Nolan et al. 2020](https://r4bds.github.io/references.html#ref-Nolan2020)).

## 2. Aim

The aims of the report is to determine what characterises the peptides binding to the HLAs, along with what characterises T-cell Receptors binding to the pMHC-complexes.

## 3. Load Libraries

```{r}
#| message: false
#| warning: false
library("tidyverse")
library("here")
library("dplyr")
library("ggplot2")
library("readr")
library("tibble")
```

## 4. Load Data

```{r}

peptide_data <- read_csv("./data/peptide-detail-ci.csv")
meta_data <- read_csv("./data/subject-metadata.csv")

#| echo: true
#| eval: false 
```

## 5. Data Description

## 6. Analysis

**Q1: How many observations of how many variables are in the data?**

**Q2: Are there groupings in the variables, i.e. do certain variables “go together” somehow?**

**T1: Re-create this plot**

**T2: Re-create this plot**

##### **STOP! Make sure you handled how `NA`s are denoted in the data before proceeding, see hint below T1**

**T3: Look at the data and create yet another plot as you see fit. Also skip the redundant variables `Subject`, `Cell Type` and `Target Type`**

**T4: Create a new version of the `meta_data`, which with respect to allele-data only contains information on class I and also fix the odd naming, e.g. `HLA-A...9`becomes `A1` oand `HLA-A...10` becomes `A2` and so on for `B1`, `B2`, `C1` and `C2`(Think: How can we `rename` variables? And here, just do it “manually” per variable). Remember to assign this new data to the same `meta_data` variable**

# The Peptide Details Data

**Q3: How many observations of how many variables are in the data?**

**T5: As before, let’s immediately subset the `peptide_data` to the variables of interest: `TCR BioIdentity`, `Experiment` and `Amino Acids`. Remember to assign this new data to the same `peptide_data` variable to avoid cluttering your environment with redundant variables. Bonus: Did you know you can click the `Environment` pane and see which variables you have?**

**Q4: Is this tidy data? Why/why not?**

**T6: See if you can find a way to create the below data, from the above**

**T7: Add a variable, which counts how many peptides are in each observation of `Amino Acids`**

**T8: Re-create the following plot**

**Q4: What is the maximum number of peptides assigned to one observation?**

**T9: Using the `str_c()` and the `seq()` functions, re-create the below**

**T10: Use, what you learned about separating in T6 and the vector-of-strings you created in T9 adjusted to the number from Q4 to create the below data**

**Q5: Now, presumable you got a warning, discuss in your group why that is?**

**Q6: With respect to `peptide_n`, discuss in your group, if this is wide- or long-data?**

**T11: Using the `peptide_data`, run a few `slice_sample()` calls with varying degree of `n` to make sure, that you get a feeling for what is going on**

**T12: From the `peptide_data` data above, with peptide_1, peptide_2, etc. create this data set using one of the data pivoting functions. Remember to start initially with sampling a smaller data set and then work on that first! Also, once you’re sure you’re good to go, reuse the `peptide_data` variable as we don’t want huge redundant data sets floating around in our environment**

**Q7: You will see some `NA`s in the `peptide` variable, discuss in your group from where these arise?**

**Q8: How many rows and columns now and how does this compare with Q3? Discuss why/why not it is different?**

**T13: Now, lose the redundant variables `n_peptides` and `peptide_n`, get rid of the `NA`s in the `peptide` column, and make sure that we only have unique observations (i.e. there are no repeated rows/observations).**

**Q8: Now how many rows and columns and is this data tidy? Discuss in your group why/why not?**

**T14: Use the `str_detect()` function to `filter` the `CDR3b` and `peptide` variables using a `pattern` of `[^ARNDCQEGHILKMFPSTWYV]` and then play with the `negate`parameter so see what happens**

**T15: Add two new variables to the data, `k_CDR3b` and `k_peptide` each signifying the length of the respective sequences**

**T16: Re-create this plot**

**Q9: What is the most predominant length of the CDR3b-sequences?**

**T17: Re-create this plot**

**Q10: What is the most predominant length of the peptide-sequences?**

**Q11: Discuss in your group, if this data set is tidy or not?**

# Creating one data set from two data sets

**Q12: Discuss in your group, if this data with respect to the `A1`, `A2`, `B1`, `B2`, `C1`and `C2` variables is a wide or a long data format?**

**T18: use either `pivot_wider()` or `pivot_longer()` to create the following data:**

**Q13: Discuss in your group, which variable(s?) define the same observations between the `peptide_data` and the `meta_data`?**

**T19: Create the following data, according to specifications above:**

**T20: Clean the data a bit more, by removing the asterisk and redundant variables:**

**T21: Create a `dplyr` pipeline, starting with the `peptide_data`, which joins it with the `meta_data` and remember to make sure that you get only unqiue observations of rows. Save this data into a new variable names `peptide_meta_data` (If you get a warning, discuss in your group what it means?)**

# Analysis

## Peptides binding to HLA

**T22: Subset the final `peptide_meta_data` data to `A02:01` and unique observations of peptides of length 9 and re-create the below sequence logo**

**T23: Repeat for e.g. `B07:02` or another of your favourite alleles**

**Q14: Which positions in the peptide determines binding to HLA?**

## CDR3b-sequences binding to pMHC

**T24: Subset the `peptide_meta_data`, such that the length of the CDR3b is 15, the allele is A02:01 and the peptide is LLFLVLIML and re-create the below sequence logo of the CDR3b sequences:**

**Q15: In your group, discuss what you see?**

**T25: Play around with other combinations of `k_CDR3b`, `Allele`, and `peptide` and inspect how the logo changes**
